pipeline {
  agent any
  stages {
    stage('Static Code Analysis') { // Get code
      steps {
        // get code from our Git repository
        git 'https://github.com/premalathasubramaniam/DevOps-Demo-WebApp.git'
      }
    }
    
    stage('Build') {
      steps {
      git 'https://github.com/premalathasubramaniam/DevOps-Demo-WebApp.git'
      echo 'maven clean'
      bat 'mvn -f DevOps-Demo-WebApp/pom.xml clean install'
      }
    }
    stage('UI Test') {
      steps {
      git 'https://github.com/premalathasubramaniam/DevOps-Demo-WebApp.git'
       
      }
    }
    stage('Performance Test') {
      steps {
      git 'https://github.com/premalathasubramaniam/DevOps-Demo-WebApp.git'
      }
    }
    stage('Deploy To QA') {
      steps {
      git 'https://github.com/premalathasubramaniam/DevOps-Demo-WebApp.git'
      }
    }
    
    stage('Store Artifact') {
      steps {
    gitlabCommitStatus("upload") {
      def server = Artifactory.server "artifactory@ibsrv02"
      def buildInfo = Artifactory.newBuildInfo()
      buildInfo.env.capture = true
      buildInfo.env.collect()
      def uploadSpec = {
        "files": [
          {
            "pattern": "**/target/*.jar",
            "target": "libs-snapshot-local"
          }, {
            "pattern": "**/target/*.pom",
            "target": "libs-snapshot-local"
          }, 
          {
            "pattern": "**/target/*.war",
            "target": "libs-snapshot-local"
          }
        ]
      }
      // Upload to Artifactory.
      server.upload spec: uploadSpec, buildInfo: buildInfo
      buildInfo.retention maxBuilds: 10, maxDays: 7, deleteBuildArtifacts: true
      // Publish build info.
      server.publishBuildInfo buildInfo
    }
    
    stage('Deploy To Prod') {
      steps {
      git 'https://github.com/premalathasubramaniam/DevOps-Demo-WebApp.git'
      }
    }
    stage('Sanity Test') {
      steps {
      git 'https://github.com/premalathasubramaniam/DevOps-Demo-WebApp.git'
      }
    }
  }
}
